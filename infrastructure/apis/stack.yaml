AWSTemplateFormatVersion: "2010-09-09"
Description: Sample AWS Lambda function which interact with Neptune
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    MemorySize: 128
    Handler: handler.handler
    Runtime: python3.11
    Timeout: 30
    VpcConfig:
      SecurityGroupIds:
        - !ImportValue neptune-lambda-security-group
      SubnetIds: !Split
        - ","
        - !ImportValue private-subnet-ids
    Environment:
      Variables:
        NEPTUNE_WRITE_ENDPOINT: !ImportValue neptune-write
        NEPTUNE_PORT: 8182
    Layers:
      - !ImportValue lambda-layer-arn

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: apis
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Auth:
        Authorizers:
          cognito:
            Identity:
              Header: Authorization
              ReauthorizeEvery: 30
            UserPoolArn: !ImportValue userpool-arn
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: 5
      DefinitionBody:
        openapi: "3.0"
        info:
          title: Neptune
          version: 1.0.0
        paths:
          /content:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetContents.Arn}/invocations
              security:
                - cognito: []
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateContent.Arn}/invocations
              security:
                - cognito: []
              responses: {}
          /newfeeds:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetNewFeeds.Arn}/invocations
              security:
                - cognito: []
              responses: {}
          /like:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Like.Arn}/invocations
              security:
                - cognito: []
              responses: {}
          /follow:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Follow.Arn}/invocations
              security:
                - cognito: []
              responses: {}
          /content-properties:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateContentProperties.Arn}/invocations
              security:
                - cognito: []
              responses: {}

  CreateContent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: neptune-create-content
      Role: !ImportValue lambda-execution-role-arn
      CodeUri:
        Bucket: tiktok-clone-infra
        Key: apis/src/CreateContent/handler.zip
      Events:
        ApiGatewayCreateContent:
          Type: Api
          Properties:
            Path: /content
            Method: POST
            RestApiId: !Ref ApiGateway

  GetContents:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: neptune-get-contents
      Role: !ImportValue lambda-execution-role-arn
      CodeUri:
        Bucket: tiktok-clone-infra
        Key: apis/src/GetContents/handler.zip
      Events:
        ApiGatewayGetContents:
          Type: Api
          Properties:
            Path: /content
            Method: GET
            RestApiId: !Ref ApiGateway

  GetNewFeeds:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: neptune-get-newfeeds
      Role: !ImportValue lambda-execution-role-arn
      CodeUri:
        Bucket: tiktok-clone-infra
        Key: apis/src/GetNewFeeds/handler.zip
      Events:
        ApiGatewayGetNewFeeds:
          Type: Api
          Properties:
            Path: /newfeeds
            Method: GET
            RestApiId: !Ref ApiGateway

  Like:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: neptune-like
      Role: !ImportValue lambda-execution-role-arn
      CodeUri:
        Bucket: tiktok-clone-infra
        Key: apis/src/Like/handler.zip
      Events:
        ApiGatewayLike:
          Type: Api
          Properties:
            Path: /like
            Method: POST
            RestApiId: !Ref ApiGateway

  Follow:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: neptune-follow
      Role: !ImportValue lambda-execution-role-arn
      CodeUri:
        Bucket: tiktok-clone-infra
        Key: apis/src/Follow/handler.zip
      Events:
        ApiGatewayFollow:
          Type: Api
          Properties:
            Path: /follow
            Method: POST
            RestApiId: !Ref ApiGateway

  UpdateContentProperties:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: neptune-update-content-properties
      Role: !ImportValue lambda-execution-role-arn
      CodeUri:
        Bucket: tiktok-clone-infra
        Key: apis/src/UpdateContentProperties/handler.zip
      Events:
        ApiGatewayUpdateContentProperties:
          Type: Api
          Properties:
            Path: /content-properties
            Method: POST
            RestApiId: !Ref ApiGateway
        ContentPropertiesSNSTopic:
          Type: SNS
          Properties:
            Topic: !ImportValue content-analysis-sns-topic

Outputs:
  ApiGatewayEndpoint:
    Description: ApiGateway APIs Endpoint
    Value: !Sub https://${ApiGateway.RootResourceId}.execute-api.${AWS::Region}.amazonaws.com/prod
    Export:
      Name: api-url
