AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template to create an S3 bucket with public access,
  static web hosting, and a specific bucket policy.

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: userpool
      MfaConfiguration: "OFF"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt CreateUser.Arn

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: tiktok-userpool
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: app-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - phone
      CallbackURLs:
        - !ImportValue distribution-domain
        - http://localhost:5173
      LogoutURLs:
        - !ImportValue distribution-domain
        - http://localhost:5173
      SupportedIdentityProviders:
        - COGNITO

  CreateUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create-user-in-dynamodb
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: tiktok-clone-infra
        S3Key: cognito/src/CreateUser/function.zip

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateVertexInDynamoDB
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "DynamoDBWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:BatchWriteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Vertex"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateUser
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

Outputs:
  UserPoolArn:
    Description: The ARN of the Cognito User Pool
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: userpool-arn

  UserPoolId:
    Description: The ID of the Cognito User Pool
    Value: !Ref CognitoUserPool
    Export:
      Name: userpool-id

  UserPoolClientId:
    Description: The ID of the Cognito User Pool App Client
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: userpool-client-id

  UserPoolDomainURL:
    Description: Domain of the Cognito User Pool
    Value: !Sub
      - https://${Domain}.auth.${AWS::Region}.amazoncognito.com
      - Domain: !Ref CognitoUserPoolDomain
    Export:
      Name: userpool-url
