AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create an S3 bucket with public access, static web hosting, and a specific bucket policy.

Parameters:
  BucketName:
    Description: Name of the S3 bucket
    Type: String

  UserPoolName:
    Type: String
    Description: Name of the Cognito User Pool

  UserPoolDomain:
    Type: String
    Description: Domain of the Cognito User Pool

  AppClientName:
    Type: String
    Description: Name of the Cognito App Client

  CloudFrontCachePolicyId:
    Type: String
    Description: ID of cache policy (currently use managed policy)

  VPCName:
    Type: String
    Description: Name of VPC

  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnet1CidrBlock:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for public subnet 1

  PublicSubnet2CidrBlock:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 2

  PrivateSubnet1CidrBlock:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 1

  PrivateSubnet2CidrBlock:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 2

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}/*"

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      MfaConfiguration: "OFF"
      UsernameAttributes:
        - "email"
      AutoVerifiedAttributes:
        - "email"

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UserPoolDomain
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Ref AppClientName
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - phone
      CallbackURLs:
        - !Sub
          - "https://${Domain}"
          - Domain: !GetAtt CloudFrontDistribution.DomainName
        - "http://localhost:5173"
      LogoutURLs:
        - !Sub
          - "https://${Domain}"
          - Domain: !GetAtt CloudFrontDistribution.DomainName
        - "http://localhost:5173"
      SupportedIdentityProviders:
        - COGNITO

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt S3Bucket.WebsiteURL]]
            Id: !Ref S3Bucket
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: !Ref S3Bucket
          CachePolicyId: !Ref CloudFrontCachePolicyId
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
        PriceClass: PriceClass_100
        Enabled: true

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpc

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: internet-gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: private-subnet-2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-route-table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-route-table

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Subnet Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket

  BucketWebsiteURL:
    Description: URL of the S3 bucket website
    Value: !GetAtt S3Bucket.WebsiteURL

  UserPoolId:
    Description: The ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: The ID of the Cognito User Pool App Client
    Value: !Ref CognitoUserPoolClient

  CloudFrontDistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref CloudFrontDistribution

  CloudFrontDistributionDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
